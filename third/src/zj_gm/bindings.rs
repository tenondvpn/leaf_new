/* automatically generated by rust-bindgen 0.59.2 */

pub const __BIONIC__: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __bos_level: u32 = 0;
pub const __ANDROID_API_FUTURE__: u32 = 10000;
pub const __ANDROID_API__: u32 = 10000;
pub const __ANDROID_API_G__: u32 = 9;
pub const __ANDROID_API_I__: u32 = 14;
pub const __ANDROID_API_J__: u32 = 16;
pub const __ANDROID_API_J_MR1__: u32 = 17;
pub const __ANDROID_API_J_MR2__: u32 = 18;
pub const __ANDROID_API_K__: u32 = 19;
pub const __ANDROID_API_L__: u32 = 21;
pub const __ANDROID_API_L_MR1__: u32 = 22;
pub const __ANDROID_API_M__: u32 = 23;
pub const __ANDROID_API_N__: u32 = 24;
pub const __ANDROID_API_N_MR1__: u32 = 25;
pub const __ANDROID_API_O__: u32 = 26;
pub const __ANDROID_API_O_MR1__: u32 = 27;
pub const __ANDROID_API_P__: u32 = 28;
pub const __ANDROID_API_Q__: u32 = 29;
pub const __ANDROID_API_R__: u32 = 30;
pub const __ANDROID_API_S__: u32 = 31;
pub const __ANDROID_API_T__: u32 = 33;
pub const __ANDROID_NDK__: u32 = 1;
pub const __NDK_MAJOR__: u32 = 23;
pub const __NDK_MINOR__: u32 = 2;
pub const __NDK_BETA__: u32 = 0;
pub const __NDK_BUILD__: u32 = 8568313;
pub const __NDK_CANARY__: u32 = 0;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const P_ALL: u32 = 0;
pub const P_PID: u32 = 1;
pub const P_PGID: u32 = 2;
pub const P_PIDFD: u32 = 3;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const __GNUC_VA_LIST: u32 = 1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 4096;
pub const L_tmpnam: u32 = 4096;
pub const TMP_MAX: u32 = 308915776;
pub const P_tmpdir: &[u8; 6usize] = b"/tmp/\0";
pub const L_ctermid: u32 = 1024;
pub const STRUCT_MALLINFO_DECLARED: u32 = 1;
pub const M_DECAY_TIME: i32 = -100;
pub const M_PURGE: i32 = -101;
pub const M_MEMTAG_TUNING: i32 = -102;
pub const M_MEMTAG_TUNING_BUFFER_OVERFLOW: u32 = 0;
pub const M_MEMTAG_TUNING_UAF: u32 = 1;
pub const M_THREAD_DISABLE_MEM_INIT: i32 = -103;
pub const M_CACHE_COUNT_MAX: i32 = -200;
pub const M_CACHE_SIZE_MAX: i32 = -201;
pub const M_TSDS_COUNT_MAX: i32 = -202;
pub const M_BIONIC_ZERO_INIT: i32 = -203;
pub const M_BIONIC_SET_HEAP_TAGGING_LEVEL: i32 = -204;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
extern "C" {
    pub fn android_get_application_target_sdk_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn android_get_device_api_level() -> ::std::os::raw::c_int;
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_fast16_t = i64;
pub type uint_fast16_t = u64;
pub type int_fast32_t = i64;
pub type uint_fast32_t = u64;
pub type uintmax_t = u64;
pub type intmax_t = i64;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub flags: u32,
    pub stack_base: *mut ::std::os::raw::c_void,
    pub stack_size: size_t,
    pub guard_size: size_t,
    pub sched_policy: i32,
    pub sched_priority: i32,
    pub __reserved: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).stack_base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(stack_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).stack_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).guard_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(guard_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).sched_policy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(sched_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).sched_priority as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(sched_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_t {
    pub __private: [i64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_barrierattr_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t {
    pub __private: [i32; 12usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_condattr_t = ::std::os::raw::c_long;
pub type pthread_key_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t {
    pub __private: [i32; 10usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_mutexattr_t = ::std::os::raw::c_long;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t {
    pub __private: [i32; 14usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_rwlockattr_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock_t {
    pub __private: i64,
}
#[test]
fn bindgen_test_layout_pthread_spinlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_spinlock_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_spinlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_spinlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_spinlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_spinlock_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_spinlock_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_long;
pub type __gid_t = __kernel_gid32_t;
pub type gid_t = __gid_t;
pub type __uid_t = __kernel_uid32_t;
pub type uid_t = __uid_t;
pub type __pid_t = __kernel_pid_t;
pub type pid_t = __pid_t;
pub type __id_t = u32;
pub type id_t = __id_t;
pub type blkcnt_t = ::std::os::raw::c_ulong;
pub type blksize_t = ::std::os::raw::c_ulong;
pub type caddr_t = __kernel_caddr_t;
pub type clock_t = __kernel_clock_t;
pub type __clockid_t = __kernel_clockid_t;
pub type clockid_t = __clockid_t;
pub type daddr_t = __kernel_daddr_t;
pub type fsblkcnt_t = ::std::os::raw::c_ulong;
pub type fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __mode_t = __kernel_mode_t;
pub type mode_t = __mode_t;
pub type __key_t = __kernel_key_t;
pub type key_t = __key_t;
pub type __ino_t = __kernel_ino_t;
pub type ino_t = __ino_t;
pub type ino64_t = u64;
pub type __nlink_t = u32;
pub type nlink_t = __nlink_t;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type timer_t = __timer_t;
pub type __suseconds_t = __kernel_suseconds_t;
pub type suseconds_t = __suseconds_t;
pub type __useconds_t = u32;
pub type useconds_t = __useconds_t;
pub type dev_t = u64;
pub type __time_t = __kernel_time_t;
pub type time_t = __time_t;
pub type off_t = i64;
pub type loff_t = off_t;
pub type off64_t = loff_t;
pub type __socklen_t = u32;
pub type socklen_t = __socklen_t;
pub type __va_list = __builtin_va_list;
pub type ssize_t = __kernel_ssize_t;
pub type uint_t = ::std::os::raw::c_uint;
pub type uint = ::std::os::raw::c_uint;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type u_int32_t = u32;
pub type u_int16_t = u16;
pub type u_int8_t = u8;
pub type u_int64_t = u64;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type fpos_t = off_t;
pub type fpos64_t = off64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    _unused: [u8; 0],
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn clearerr(__fp: *mut FILE);
}
extern "C" {
    pub fn fclose(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fprintf(
        __fp: *mut FILE,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __buf: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __count: ::std::os::raw::c_ulong,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fscanf(
        __fp: *mut FILE,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwrite(
        __buf: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __count: ::std::os::raw::c_ulong,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __line_ptr: *mut *mut ::std::os::raw::c_char,
        __line_length_ptr: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __line_ptr: *mut *mut ::std::os::raw::c_char,
        __line_length_ptr: *mut size_t,
        __fp: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn perror(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(__fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(__fp: *mut FILE);
}
extern "C" {
    pub fn scanf(__fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(__fp: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __fp: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __fp: *mut FILE,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __fp: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rename(
        __old_path: *const ::std::os::raw::c_char,
        __new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __old_dir_fd: ::std::os::raw::c_int,
        __old_path: *const ::std::os::raw::c_char,
        __new_dir_fd: ::std::os::raw::c_int,
        __new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        __fp: *mut FILE,
        __offset: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__fp: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fgetpos(__fp: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__fp: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko(
        __fp: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__fp: *mut FILE) -> off_t;
}
extern "C" {
    pub fn fgetpos64(__fp: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__fp: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __fp: *mut FILE,
        __offset: off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__fp: *mut FILE) -> off64_t;
}
extern "C" {
    pub fn fopen(
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
        __fp: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
        __fp: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn snprintf(
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __fp: *mut FILE,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn flockfile(__fp: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__fp: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __size_ptr: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn asprintf(
        __s_ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetln(__fp: *mut FILE, __length_ptr: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __fp: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __s_ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__fp: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__byte_count: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __item_count: ::std::os::raw::c_ulong,
        __item_size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __byte_count: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __item_count: size_t,
        __item_size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn memalign(
        __alignment: ::std::os::raw::c_ulong,
        __byte_count: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_usable_size(__ptr: *const ::std::os::raw::c_void) -> size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mallinfo {
    pub arena: size_t,
    pub ordblks: size_t,
    pub smblks: size_t,
    pub hblks: size_t,
    pub hblkhd: size_t,
    pub usmblks: size_t,
    pub fsmblks: size_t,
    pub uordblks: size_t,
    pub fordblks: size_t,
    pub keepcost: size_t,
}
#[test]
fn bindgen_test_layout_mallinfo() {
    assert_eq!(
        ::std::mem::size_of::<mallinfo>(),
        80usize,
        concat!("Size of: ", stringify!(mallinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mallinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mallinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).arena as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).ordblks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(ordblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).smblks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(smblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).hblks as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(hblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).hblkhd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(hblkhd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).usmblks as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(usmblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).fsmblks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(fsmblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).uordblks as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(uordblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).fordblks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(fordblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).keepcost as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(keepcost)
        )
    );
}
extern "C" {
    pub fn mallinfo() -> mallinfo;
}
extern "C" {
    pub fn malloc_info(
        __must_be_zero: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_NONE: HeapTaggingLevel = 0;
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_TBI: HeapTaggingLevel = 1;
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_ASYNC: HeapTaggingLevel = 2;
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_SYNC: HeapTaggingLevel = 3;
pub type HeapTaggingLevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn mallopt(
        __option: ::std::os::raw::c_int,
        __value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __malloc_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __byte_count: size_t,
            __caller: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut __realloc_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __byte_count: size_t,
            __caller: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut __free_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __caller: *const ::std::os::raw::c_void,
        ),
    >;
}
extern "C" {
    pub static mut __memalign_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __alignment: size_t,
            __byte_count: size_t,
            __caller: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_t;
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn atexit(__fn: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __fn: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__assignment: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffix_length: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffix_length: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtol(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtod(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoul_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn atoi(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn realpath(
        __path: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __comparator: ::std::option::Option<
            unsafe extern "C" fn(
                __lhs: *const ::std::os::raw::c_void,
                __rhs: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __comparator: ::std::option::Option<
            unsafe extern "C" fn(
                __lhs: *const ::std::os::raw::c_void,
                __rhs: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn rand_r(__seed_ptr: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn srand48(__seed: ::std::os::raw::c_long);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __state: *mut ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__state: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __option: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __value_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn div(__numerator: ::std::os::raw::c_int, __denominator: ::std::os::raw::c_int) -> div_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn ldiv(
        __numerator: ::std::os::raw::c_long,
        __denominator: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn lldiv(
        __numerator: ::std::os::raw::c_longlong,
        __denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn getloadavg(__averages: *mut f64, __n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(__name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __dst: *mut wchar_t,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        __wc_ptr: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__dst: *mut ::std::os::raw::c_char, __wc: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtof(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn atof(__s: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtoll_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtold_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __l: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtod_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __l: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __l: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        arg1: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_long;
}
#[doc = " SM2 上下文信息"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm2_ctx_t {
    pub group: *mut ::std::os::raw::c_void,
    pub generator: *mut ::std::os::raw::c_void,
    pub jcb_generator: *mut ::std::os::raw::c_void,
    pub jcb_compute_var: *mut ::std::os::raw::c_void,
    pub bn_vars: *mut ::std::os::raw::c_void,
    pub ec_vars: *mut ::std::os::raw::c_void,
    pub pre_comp_g: *mut ::std::os::raw::c_void,
    pub pre_comp_p: *mut ::std::os::raw::c_void,
    pub rand_ctx: *mut ::std::os::raw::c_void,
    pub pubkey_x: *mut ::std::os::raw::c_void,
    pub pubkey_y: *mut ::std::os::raw::c_void,
    pub sign_random: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sm2_ctx_t() {
    assert_eq!(
        ::std::mem::size_of::<sm2_ctx_t>(),
        96usize,
        concat!("Size of: ", stringify!(sm2_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sm2_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sm2_ctx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).generator as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(generator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).jcb_generator as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(jcb_generator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).jcb_compute_var as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(jcb_compute_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).bn_vars as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(bn_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).ec_vars as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(ec_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pre_comp_g as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pre_comp_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pre_comp_p as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pre_comp_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).rand_ctx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(rand_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pubkey_x as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pubkey_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pubkey_y as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pubkey_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).sign_random as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(sign_random)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm3_ctx_t {
    pub digest: [u32; 8usize],
    pub nblocks: u32,
    pub block: [::std::os::raw::c_uchar; 64usize],
    pub num: u32,
}
#[test]
fn bindgen_test_layout_sm3_ctx_t() {
    assert_eq!(
        ::std::mem::size_of::<sm3_ctx_t>(),
        104usize,
        concat!("Size of: ", stringify!(sm3_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sm3_ctx_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sm3_ctx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).digest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).nblocks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(nblocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).block as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).num as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(num)
        )
    );
}
pub const asymmetric_cryptograph_t_SM2: asymmetric_cryptograph_t = 0;
pub const asymmetric_cryptograph_t_CRYSTALS_KYBER: asymmetric_cryptograph_t = 1;
pub const asymmetric_cryptograph_t_ASYMMETRIC_CRYPT_MAX: asymmetric_cryptograph_t = 2;
#[doc = " 非对称加密"]
pub type asymmetric_cryptograph_t = ::std::os::raw::c_uint;
pub const signature_algorithm_t_SM2_SIGN: signature_algorithm_t = 0;
pub const signature_algorithm_t_CRYSTALS_DILITHIUM: signature_algorithm_t = 1;
pub const signature_algorithm_t_FALCON: signature_algorithm_t = 2;
pub const signature_algorithm_t_SPHINCS_PLUS: signature_algorithm_t = 3;
pub const signature_algorithm_t_SIGNATURE_ALGO_MAX: signature_algorithm_t = 4;
#[doc = " 数字签名算法"]
pub type signature_algorithm_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = "  SM2上下文ctx初始化接口。"]
    #[doc = ""]
    #[doc = "在使用SM2接口进行密钥生成、加密解密、签名验签之前，必须调用该接口。"]
    #[doc = "该接口只需调用一次，在后续的密钥生成、加密解密、签名验签运算中，无需再次调用该接口。"]
    #[doc = "该接口所涉及ctx不是线程安全的，如需支持多线程，可对涉及ctx参数的接口调用加锁以保证线程安全，或不同线程使用不同的ctx。"]
    #[doc = "如需支持多线程，推荐在不同线程使用不同的ctx，以防止加锁带来的性能损耗。"]
    #[doc = " @param sm2_ctx 函数出参 - 上下文"]
    #[doc = " @return 0表示成功，其他值为错误"]
    pub fn init_sm2_ctx(sm2_ctx: *mut sm2_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "使用完SM2算法后，必须调用SM2FreeCtx函数释放相关数据。"]
    #[doc = "如果ctx需要在整个线程生命周期复用的话，可在线程退出前释放。"]
    pub fn free_sm2_ctx(sm2_ctx: *mut sm2_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "生成私钥"]
    #[doc = "@param output_private_key  函数出参 - 私钥"]
    #[doc = "@param private_key_len  函数出参 - 私钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选SM2、RSA、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_private_key(
        output_private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 生成私钥"]
    #[doc = " @param sm2_ctx SM2上下文"]
    #[doc = " @param output_private_key 函数出参 - 私钥"]
    #[doc = " @param private_key_len 函数出参 - 私钥长度"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn generate_private_key_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        output_private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "根据私钥生成对应公钥，"]
    #[doc = "@param private_key 函数入参 - 私钥"]
    #[doc = "@param private_key_len  函数入参 - 私钥长度"]
    #[doc = "@param output_public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_public_key(
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output_public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "根据私钥生成对应公钥，"]
    #[doc = "@param sm2_ctx SM2上下文"]
    #[doc = "@param private_key 函数入参 - 私钥"]
    #[doc = "@param private_key_len  函数入参 - 私钥长度"]
    #[doc = "@param output_public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_public_key_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output_public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "生成公私钥对"]
    #[doc = "@param private_key 函数出参 - 私钥"]
    #[doc = "@param private_key_len  函数出参 - 私钥长度"]
    #[doc = "@param public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_key_pair(
        private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
        public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "生成公私钥对"]
    #[doc = "@param sm2_ctx SM2上下文"]
    #[doc = "@param private_key 函数出参 - 私钥"]
    #[doc = "@param private_key_len  函数出参 - 私钥长度"]
    #[doc = "@param public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_key_pair_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
        public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "加密"]
    #[doc = "@param input  函数入参 - 待加密消息"]
    #[doc = "@param input_len  函数入参 - 消息长度(字节单位)"]
    #[doc = "@param str_public_key  函数入参 - 公钥"]
    #[doc = "@param public_key_len  函数入参 - 公钥长度"]
    #[doc = "@param output  函数出参 - 密文"]
    #[doc = "@param output_len  函数入参和出参 - 密文长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn asymmetric_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asymmetric_encrypt_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "解密"]
    #[doc = "@param input  函数入参 - 待解密密文"]
    #[doc = "@param input_len  函数入参 - 密文长度(字节单位)"]
    #[doc = "@param str_private_key  函数入参 - 私钥"]
    #[doc = "@param private_key_len  函数入参 - 私钥长度"]
    #[doc = "@param output  函数出参 - 明文"]
    #[doc = "@param output_len  函数入参和出参 - 明文长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn asymmetric_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asymmetric_decrypt_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "签名"]
    #[doc = "@param msg 函数入参 - 待签名消息"]
    #[doc = "@param msg_len 函数入参 - 待签名消息长度"]
    #[doc = "@param id 函数入参 - 用户ID(作用是加入到签名hash中，对于传入值无特殊要求)"]
    #[doc = "@param id_len 函数入参 - 用户ID长度"]
    #[doc = "@param public_key 函数入参 - 公钥(作用是加入到签名hash中)"]
    #[doc = "@param public_key_len 函数入参 - 公钥长度"]
    #[doc = "@param private_key 函数入参 - 私钥"]
    #[doc = "@param private_key_len 函数入参 - 私钥长度"]
    #[doc = "@param signature 函数出参 - 签名结果"]
    #[doc = "@param signature_len 函数入参和出参 - 签名结果长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    pub fn sign(
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        signature: *mut ::std::os::raw::c_uchar,
        signature_len: *mut size_t,
        type_: signature_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        signature: *mut ::std::os::raw::c_uchar,
        signature_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "验签"]
    #[doc = "@param msg 函数入参 - 待验签内容"]
    #[doc = "@param msg_len 函数入参 - 待验签内容长度"]
    #[doc = "@param id 函数入参 - 用户ID"]
    #[doc = "@param id_len 函数入参 - 用户ID长度"]
    #[doc = "@param signature 函数入参 - 签名结果"]
    #[doc = "@param signature_len 函数入参 - 签名结果长度"]
    #[doc = "@param public_key 函数入参 - 公钥"]
    #[doc = "@param public_key_len 函数入参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选SM2、RSA、后量子密码算法等"]
    #[doc = "@return 0表示成功，其他值为错误码"]
    pub fn verify(
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        signature: *const ::std::os::raw::c_uchar,
        signature_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        type_: signature_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn verify_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        signature: *const ::std::os::raw::c_uchar,
        signature_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
pub const hash_algorithm_t_SM3_CRYPTO: hash_algorithm_t = 0;
pub const hash_algorithm_t_SHA_224: hash_algorithm_t = 1;
pub const hash_algorithm_t_SHA_256: hash_algorithm_t = 2;
pub const hash_algorithm_t_SHA_384: hash_algorithm_t = 3;
pub const hash_algorithm_t_SHA_512: hash_algorithm_t = 4;
pub const hash_algorithm_t_SHA_512_224: hash_algorithm_t = 5;
pub const hash_algorithm_t_SHA_512_256: hash_algorithm_t = 6;
pub const hash_algorithm_t_SHA3_224: hash_algorithm_t = 7;
pub const hash_algorithm_t_SHA3_256: hash_algorithm_t = 8;
pub const hash_algorithm_t_SHA3_384: hash_algorithm_t = 9;
pub const hash_algorithm_t_SHA3_512: hash_algorithm_t = 10;
pub const hash_algorithm_t_SHAKE128: hash_algorithm_t = 11;
pub const hash_algorithm_t_SHAKE256: hash_algorithm_t = 12;
pub const hash_algorithm_t_KECCAK: hash_algorithm_t = 13;
pub type hash_algorithm_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " 计算摘要值"]
    #[doc = " @param data 函数入参 - 计算的数据"]
    #[doc = " @param data_len 函数入参 - 数据长度"]
    #[doc = " @param digest  函数出参 - 输出的摘要值"]
    #[doc = " @param digest_len  函数出参 - 输出的摘要值长度"]
    #[doc = " @param type 函数入参 - Hash算法类型，可选sm3、SHA3等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn hash_digest(
        data: *const ::std::os::raw::c_uchar,
        data_len: size_t,
        digest: *mut ::std::os::raw::c_uchar,
        digest_len: *mut size_t,
        type_: hash_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 计算HMAC值"]
    #[doc = " @param data 做HMAC计算的数据"]
    #[doc = " @param data_len 数据长度"]
    #[doc = " @param key HMAC用的秘钥"]
    #[doc = " @param key_len 秘钥长度"]
    #[doc = " @param mac 输出的HMAC字节码"]
    #[doc = " @param mac_size 输出的HMAC长度"]
    #[doc = " @param type 函数入参 - Hash算法类型，可选sm3、SHA3、后量子密码算法等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn hmac(
        data: *const ::std::os::raw::c_uchar,
        data_len: size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        mac: *mut ::std::os::raw::c_uchar,
        mac_size: *mut size_t,
        type_: hash_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
pub const symmetric_cryptograph_t_SM4: symmetric_cryptograph_t = 0;
#[doc = " 非对称密码"]
pub type symmetric_cryptograph_t = ::std::os::raw::c_uint;
pub const padding_t_PADDING: padding_t = 0;
pub const padding_t_NO_PADDING: padding_t = 1;
#[doc = " 是否有填充"]
pub type padding_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = "生成对称算法密钥"]
    #[doc = " @param output_key  函数出参 - 密钥"]
    #[doc = " @param key_len  函数出参 - 密钥长度"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn generate_symmetric_key(
        output_key: *mut ::std::os::raw::c_uchar,
        key_len: *mut size_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " ECB模式对称加解密。加密"]
    #[doc = " @param input 函数入参 - 明文"]
    #[doc = " @param input_len 函数入参 - 明文长度"]
    #[doc = " @param output 函数出参 - 密文"]
    #[doc = " @param output_len 函数出参 - 密文长度"]
    #[doc = " @param key 函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn ecb_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " ECB模式对称加解密。解密"]
    #[doc = " @param input 函数入参 - 密文"]
    #[doc = " @param input_len 函数入参 - 密文长度"]
    #[doc = " @param output 函数出参 - 明文"]
    #[doc = " @param output_len 函数出参 - 明文长度"]
    #[doc = " @param key 函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn ecb_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CBC模式对称加解密。加密，如果有填充，则使用PKCS#7填充标准。"]
    #[doc = " @param input  函数入参 - 明文"]
    #[doc = " @param input_len  函数入参 - 明文长度"]
    #[doc = " @param output  函数出参 - 密文"]
    #[doc = " @param output_len  函数出参 - 密文长度"]
    #[doc = " @param key  函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param iv  函数入参 - 初始化向量"]
    #[doc = " @param iv_len  函数入参 - 初始化向量长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn cbc_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CBC模式对称加解密。解密，如果有填充，则使用PKCS#7填充标准"]
    #[doc = " @param input  函数入参 - 密文"]
    #[doc = " @param input_len  函数入参 - 密文长度"]
    #[doc = " @param output  函数出参 - 明文"]
    #[doc = " @param output_len  函数出参 - 明文长度"]
    #[doc = " @param key  函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param iv  函数入参 - 初始化向量"]
    #[doc = " @param iv_len  函数入参 - 初始化向量长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn cbc_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "GCM模式对称加解密。加密，若有填充，则使用PKCS7填充"]
    #[doc = "@param input  函数入参 - 明文"]
    #[doc = "@param input_len  函数入参 - 明文长度"]
    #[doc = "@param output  函数出参 - 密文"]
    #[doc = "@param output_len  函数出参 - 密文长度"]
    #[doc = "@param tag  函数出参 - GMAC值，即消息验证码"]
    #[doc = "@param tag_len  既作函数入参也作为函数出参 - GMAC长度"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param aad  函数入参 - 附加验证消息"]
    #[doc = "@param aad_len  函数入参 - 附加验证消息长度"]
    #[doc = "@param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = "@param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = "@return 成功为0，一般加密失败是由参数错误导致"]
    pub fn gcm_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        tag: *mut ::std::os::raw::c_uchar,
        tag_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "GCM模式对称加解密。解密，若有填充，则使用PKCS7填充"]
    #[doc = "@param input  函数入参 - 密文"]
    #[doc = "@param input_len  函数入参 - 密文长度"]
    #[doc = "@param output  函数出参 - 明文"]
    #[doc = "@param output_len  函数出参 - 明文长度"]
    #[doc = "@param tag  函数入参 - GMAC值，即消息验证码"]
    #[doc = "@param tag_len  函数入参 - GMAC长度，通常取16字节"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param aad  函数入参 - 附加验证消息"]
    #[doc = "@param aad_len  函数入参 - 附加验证消息长度"]
    #[doc = "@return 成功为0，GCM的解密失败主要是tag校验失败"]
    pub fn gcm_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        tag: *const ::std::os::raw::c_uchar,
        tag_len: size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CTR模式对称加解密。加密，CTR模式不需要填充。"]
    #[doc = "@param input 函数入参 - 明文"]
    #[doc = "@param input_len 函数入参 - 明文长度"]
    #[doc = "@param output 函数出参 - 密文"]
    #[doc = "@param output_len 函数出参 - 密文长度"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = "@return 0表示成功，其他值为错误码"]
    pub fn ctr_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CTR模式对称加解密。解密，CTR模式不需要填充。"]
    #[doc = "@param input  函数入参 - 密文"]
    #[doc = "@param input_len  函数入参 - 密文长度"]
    #[doc = "@param output  函数出参 - 明文"]
    #[doc = "@param output_len  函数出参 - 明文长度"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = "@return 0表示成功，其他值为错误码"]
    pub fn ctr_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "SM3 hash算法，3个接口用法与OpenSSL的MD5算法的接口保持一致。"]
    #[doc = "digest至少需要分配32字节"]
    pub fn SM3Init(ctx: *mut sm3_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SM3Update(
        ctx: *mut sm3_ctx_t,
        data: *const ::std::os::raw::c_uchar,
        data_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SM3Final(
        ctx: *mut sm3_ctx_t,
        digest: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
