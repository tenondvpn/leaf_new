/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__low as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__high as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wseq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[doc = " SM2 上下文信息"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm2_ctx_t {
    pub group: *mut ::std::os::raw::c_void,
    pub generator: *mut ::std::os::raw::c_void,
    pub jcb_generator: *mut ::std::os::raw::c_void,
    pub jcb_compute_var: *mut ::std::os::raw::c_void,
    pub bn_vars: *mut ::std::os::raw::c_void,
    pub ec_vars: *mut ::std::os::raw::c_void,
    pub pre_comp_g: *mut ::std::os::raw::c_void,
    pub pre_comp_p: *mut ::std::os::raw::c_void,
    pub rand_ctx: *mut ::std::os::raw::c_void,
    pub pubkey_x: *mut ::std::os::raw::c_void,
    pub pubkey_y: *mut ::std::os::raw::c_void,
    pub sign_random: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sm2_ctx_t() {
    assert_eq!(
        ::std::mem::size_of::<sm2_ctx_t>(),
        96usize,
        concat!("Size of: ", stringify!(sm2_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sm2_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sm2_ctx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).generator as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(generator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).jcb_generator as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(jcb_generator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).jcb_compute_var as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(jcb_compute_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).bn_vars as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(bn_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).ec_vars as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(ec_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pre_comp_g as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pre_comp_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pre_comp_p as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pre_comp_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).rand_ctx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(rand_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pubkey_x as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pubkey_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).pubkey_y as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(pubkey_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm2_ctx_t>())).sign_random as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sm2_ctx_t),
            "::",
            stringify!(sign_random)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm3_ctx_t {
    pub digest: [u32; 8usize],
    pub nblocks: u32,
    pub block: [::std::os::raw::c_uchar; 64usize],
    pub num: u32,
}
#[test]
fn bindgen_test_layout_sm3_ctx_t() {
    assert_eq!(
        ::std::mem::size_of::<sm3_ctx_t>(),
        104usize,
        concat!("Size of: ", stringify!(sm3_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sm3_ctx_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sm3_ctx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).digest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).nblocks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(nblocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).block as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm3_ctx_t>())).num as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sm3_ctx_t),
            "::",
            stringify!(num)
        )
    );
}
pub const asymmetric_cryptograph_t_SM2: asymmetric_cryptograph_t = 0;
pub const asymmetric_cryptograph_t_CRYSTALS_KYBER: asymmetric_cryptograph_t = 1;
pub const asymmetric_cryptograph_t_ASYMMETRIC_CRYPT_MAX: asymmetric_cryptograph_t = 2;
#[doc = " 非对称加密"]
pub type asymmetric_cryptograph_t = ::std::os::raw::c_uint;
pub const signature_algorithm_t_SM2_SIGN: signature_algorithm_t = 0;
pub const signature_algorithm_t_CRYSTALS_DILITHIUM: signature_algorithm_t = 1;
pub const signature_algorithm_t_FALCON: signature_algorithm_t = 2;
pub const signature_algorithm_t_SPHINCS_PLUS: signature_algorithm_t = 3;
pub const signature_algorithm_t_SIGNATURE_ALGO_MAX: signature_algorithm_t = 4;
#[doc = " 数字签名算法"]
pub type signature_algorithm_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = "  SM2上下文ctx初始化接口。"]
    #[doc = ""]
    #[doc = "在使用SM2接口进行密钥生成、加密解密、签名验签之前，必须调用该接口。"]
    #[doc = "该接口只需调用一次，在后续的密钥生成、加密解密、签名验签运算中，无需再次调用该接口。"]
    #[doc = "该接口所涉及ctx不是线程安全的，如需支持多线程，可对涉及ctx参数的接口调用加锁以保证线程安全，或不同线程使用不同的ctx。"]
    #[doc = "如需支持多线程，推荐在不同线程使用不同的ctx，以防止加锁带来的性能损耗。"]
    #[doc = " @param sm2_ctx 函数出参 - 上下文"]
    #[doc = " @return 0表示成功，其他值为错误"]
    pub fn init_sm2_ctx(sm2_ctx: *mut sm2_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "使用完SM2算法后，必须调用SM2FreeCtx函数释放相关数据。"]
    #[doc = "如果ctx需要在整个线程生命周期复用的话，可在线程退出前释放。"]
    pub fn free_sm2_ctx(sm2_ctx: *mut sm2_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "生成私钥"]
    #[doc = "@param output_private_key  函数出参 - 私钥"]
    #[doc = "@param private_key_len  函数出参 - 私钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选SM2、RSA、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_private_key(
        output_private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 生成私钥"]
    #[doc = " @param sm2_ctx SM2上下文"]
    #[doc = " @param output_private_key 函数出参 - 私钥"]
    #[doc = " @param private_key_len 函数出参 - 私钥长度"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn generate_private_key_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        output_private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "根据私钥生成对应公钥，"]
    #[doc = "@param private_key 函数入参 - 私钥"]
    #[doc = "@param private_key_len  函数入参 - 私钥长度"]
    #[doc = "@param output_public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_public_key(
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output_public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "根据私钥生成对应公钥，"]
    #[doc = "@param sm2_ctx SM2上下文"]
    #[doc = "@param private_key 函数入参 - 私钥"]
    #[doc = "@param private_key_len  函数入参 - 私钥长度"]
    #[doc = "@param output_public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_public_key_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output_public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "生成公私钥对"]
    #[doc = "@param private_key 函数出参 - 私钥"]
    #[doc = "@param private_key_len  函数出参 - 私钥长度"]
    #[doc = "@param public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_key_pair(
        private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
        public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "生成公私钥对"]
    #[doc = "@param sm2_ctx SM2上下文"]
    #[doc = "@param private_key 函数出参 - 私钥"]
    #[doc = "@param private_key_len  函数出参 - 私钥长度"]
    #[doc = "@param public_key 函数出参 - 公钥"]
    #[doc = "@param public_key_len  函数出参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn generate_key_pair_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        private_key: *mut ::std::os::raw::c_char,
        private_key_len: *mut size_t,
        public_key: *mut ::std::os::raw::c_char,
        public_key_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "加密"]
    #[doc = "@param input  函数入参 - 待加密消息"]
    #[doc = "@param input_len  函数入参 - 消息长度(字节单位)"]
    #[doc = "@param str_public_key  函数入参 - 公钥"]
    #[doc = "@param public_key_len  函数入参 - 公钥长度"]
    #[doc = "@param output  函数出参 - 密文"]
    #[doc = "@param output_len  函数入参和出参 - 密文长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn asymmetric_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asymmetric_encrypt_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "解密"]
    #[doc = "@param input  函数入参 - 待解密密文"]
    #[doc = "@param input_len  函数入参 - 密文长度(字节单位)"]
    #[doc = "@param str_private_key  函数入参 - 私钥"]
    #[doc = "@param private_key_len  函数入参 - 私钥长度"]
    #[doc = "@param output  函数出参 - 明文"]
    #[doc = "@param output_len  函数入参和出参 - 明文长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    #[doc = "@return  0表示成功，其他值为错误码"]
    pub fn asymmetric_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        type_: asymmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asymmetric_decrypt_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        str_private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "签名"]
    #[doc = "@param msg 函数入参 - 待签名消息"]
    #[doc = "@param msg_len 函数入参 - 待签名消息长度"]
    #[doc = "@param id 函数入参 - 用户ID(作用是加入到签名hash中，对于传入值无特殊要求)"]
    #[doc = "@param id_len 函数入参 - 用户ID长度"]
    #[doc = "@param public_key 函数入参 - 公钥(作用是加入到签名hash中)"]
    #[doc = "@param public_key_len 函数入参 - 公钥长度"]
    #[doc = "@param private_key 函数入参 - 私钥"]
    #[doc = "@param private_key_len 函数入参 - 私钥长度"]
    #[doc = "@param signature 函数出参 - 签名结果"]
    #[doc = "@param signature_len 函数入参和出参 - 签名结果长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选sm2、rsa、后量子密码算法等"]
    pub fn sign(
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        signature: *mut ::std::os::raw::c_uchar,
        signature_len: *mut size_t,
        type_: signature_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        private_key: *const ::std::os::raw::c_char,
        private_key_len: size_t,
        signature: *mut ::std::os::raw::c_uchar,
        signature_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "验签"]
    #[doc = "@param msg 函数入参 - 待验签内容"]
    #[doc = "@param msg_len 函数入参 - 待验签内容长度"]
    #[doc = "@param id 函数入参 - 用户ID"]
    #[doc = "@param id_len 函数入参 - 用户ID长度"]
    #[doc = "@param signature 函数入参 - 签名结果"]
    #[doc = "@param signature_len 函数入参 - 签名结果长度"]
    #[doc = "@param public_key 函数入参 - 公钥"]
    #[doc = "@param public_key_len 函数入参 - 公钥长度"]
    #[doc = "@param type 函数入参 - 加密算法类型，可选SM2、RSA、后量子密码算法等"]
    #[doc = "@return 0表示成功，其他值为错误码"]
    pub fn verify(
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        signature: *const ::std::os::raw::c_uchar,
        signature_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
        type_: signature_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn verify_ctx(
        sm2_ctx: *mut sm2_ctx_t,
        msg: *const ::std::os::raw::c_uchar,
        msg_len: size_t,
        id: *const ::std::os::raw::c_char,
        id_len: size_t,
        signature: *const ::std::os::raw::c_uchar,
        signature_len: size_t,
        public_key: *const ::std::os::raw::c_char,
        public_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
pub const hash_algorithm_t_SM3_CRYPTO: hash_algorithm_t = 0;
pub const hash_algorithm_t_SHA_224: hash_algorithm_t = 1;
pub const hash_algorithm_t_SHA_256: hash_algorithm_t = 2;
pub const hash_algorithm_t_SHA_384: hash_algorithm_t = 3;
pub const hash_algorithm_t_SHA_512: hash_algorithm_t = 4;
pub const hash_algorithm_t_SHA_512_224: hash_algorithm_t = 5;
pub const hash_algorithm_t_SHA_512_256: hash_algorithm_t = 6;
pub const hash_algorithm_t_SHA3_224: hash_algorithm_t = 7;
pub const hash_algorithm_t_SHA3_256: hash_algorithm_t = 8;
pub const hash_algorithm_t_SHA3_384: hash_algorithm_t = 9;
pub const hash_algorithm_t_SHA3_512: hash_algorithm_t = 10;
pub const hash_algorithm_t_SHAKE128: hash_algorithm_t = 11;
pub const hash_algorithm_t_SHAKE256: hash_algorithm_t = 12;
pub const hash_algorithm_t_KECCAK: hash_algorithm_t = 13;
pub type hash_algorithm_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " 计算摘要值"]
    #[doc = " @param data 函数入参 - 计算的数据"]
    #[doc = " @param data_len 函数入参 - 数据长度"]
    #[doc = " @param digest  函数出参 - 输出的摘要值"]
    #[doc = " @param digest_len  函数出参 - 输出的摘要值长度"]
    #[doc = " @param type 函数入参 - Hash算法类型，可选sm3、SHA3等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn hash_digest(
        data: *const ::std::os::raw::c_uchar,
        data_len: size_t,
        digest: *mut ::std::os::raw::c_uchar,
        digest_len: *mut size_t,
        type_: hash_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 计算HMAC值"]
    #[doc = " @param data 做HMAC计算的数据"]
    #[doc = " @param data_len 数据长度"]
    #[doc = " @param key HMAC用的秘钥"]
    #[doc = " @param key_len 秘钥长度"]
    #[doc = " @param mac 输出的HMAC字节码"]
    #[doc = " @param mac_size 输出的HMAC长度"]
    #[doc = " @param type 函数入参 - Hash算法类型，可选sm3、SHA3、后量子密码算法等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn hmac(
        data: *const ::std::os::raw::c_uchar,
        data_len: size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        mac: *mut ::std::os::raw::c_uchar,
        mac_size: *mut size_t,
        type_: hash_algorithm_t,
    ) -> ::std::os::raw::c_int;
}
pub const symmetric_cryptograph_t_SM4: symmetric_cryptograph_t = 0;
#[doc = " 非对称密码"]
pub type symmetric_cryptograph_t = ::std::os::raw::c_uint;
pub const padding_t_PADDING: padding_t = 0;
pub const padding_t_NO_PADDING: padding_t = 1;
#[doc = " 是否有填充"]
pub type padding_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = "生成对称算法密钥"]
    #[doc = " @param output_key  函数出参 - 密钥"]
    #[doc = " @param key_len  函数出参 - 密钥长度"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn generate_symmetric_key(
        output_key: *mut ::std::os::raw::c_uchar,
        key_len: *mut size_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " ECB模式对称加解密。加密"]
    #[doc = " @param input 函数入参 - 明文"]
    #[doc = " @param input_len 函数入参 - 明文长度"]
    #[doc = " @param output 函数出参 - 密文"]
    #[doc = " @param output_len 函数出参 - 密文长度"]
    #[doc = " @param key 函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn ecb_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " ECB模式对称加解密。解密"]
    #[doc = " @param input 函数入参 - 密文"]
    #[doc = " @param input_len 函数入参 - 密文长度"]
    #[doc = " @param output 函数出参 - 明文"]
    #[doc = " @param output_len 函数出参 - 明文长度"]
    #[doc = " @param key 函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn ecb_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CBC模式对称加解密。加密，如果有填充，则使用PKCS#7填充标准。"]
    #[doc = " @param input  函数入参 - 明文"]
    #[doc = " @param input_len  函数入参 - 明文长度"]
    #[doc = " @param output  函数出参 - 密文"]
    #[doc = " @param output_len  函数出参 - 密文长度"]
    #[doc = " @param key  函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param iv  函数入参 - 初始化向量"]
    #[doc = " @param iv_len  函数入参 - 初始化向量长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn cbc_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CBC模式对称加解密。解密，如果有填充，则使用PKCS#7填充标准"]
    #[doc = " @param input  函数入参 - 密文"]
    #[doc = " @param input_len  函数入参 - 密文长度"]
    #[doc = " @param output  函数出参 - 明文"]
    #[doc = " @param output_len  函数出参 - 明文长度"]
    #[doc = " @param key  函数入参 - 秘钥"]
    #[doc = " @param key_len  函数入参 - 秘钥长度"]
    #[doc = " @param iv  函数入参 - 初始化向量"]
    #[doc = " @param iv_len  函数入参 - 初始化向量长度"]
    #[doc = " @param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = " @param type 函数入参 - 对称算法类型，可选sm4、AES等"]
    #[doc = " @return 0表示成功，其他值为错误码"]
    pub fn cbc_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "GCM模式对称加解密。加密，若有填充，则使用PKCS7填充"]
    #[doc = "@param input  函数入参 - 明文"]
    #[doc = "@param input_len  函数入参 - 明文长度"]
    #[doc = "@param output  函数出参 - 密文"]
    #[doc = "@param output_len  函数出参 - 密文长度"]
    #[doc = "@param tag  函数出参 - GMAC值，即消息验证码"]
    #[doc = "@param tag_len  既作函数入参也作为函数出参 - GMAC长度"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param aad  函数入参 - 附加验证消息"]
    #[doc = "@param aad_len  函数入参 - 附加验证消息长度"]
    #[doc = "@param padding 函数入参 - 待加密数据是否有填充，如有填充，则为1；没有填充，则为0"]
    #[doc = "@param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = "@return 成功为0，一般加密失败是由参数错误导致"]
    pub fn gcm_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        tag: *mut ::std::os::raw::c_uchar,
        tag_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "GCM模式对称加解密。解密，若有填充，则使用PKCS7填充"]
    #[doc = "@param input  函数入参 - 密文"]
    #[doc = "@param input_len  函数入参 - 密文长度"]
    #[doc = "@param output  函数出参 - 明文"]
    #[doc = "@param output_len  函数出参 - 明文长度"]
    #[doc = "@param tag  函数入参 - GMAC值，即消息验证码"]
    #[doc = "@param tag_len  函数入参 - GMAC长度，通常取16字节"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param aad  函数入参 - 附加验证消息"]
    #[doc = "@param aad_len  函数入参 - 附加验证消息长度"]
    #[doc = "@return 成功为0，GCM的解密失败主要是tag校验失败"]
    pub fn gcm_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        tag: *const ::std::os::raw::c_uchar,
        tag_len: size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: size_t,
        padding: padding_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CTR模式对称加解密。加密，CTR模式不需要填充。"]
    #[doc = "@param input 函数入参 - 明文"]
    #[doc = "@param input_len 函数入参 - 明文长度"]
    #[doc = "@param output 函数出参 - 密文"]
    #[doc = "@param output_len 函数出参 - 密文长度"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = "@return 0表示成功，其他值为错误码"]
    pub fn ctr_encrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "CTR模式对称加解密。解密，CTR模式不需要填充。"]
    #[doc = "@param input  函数入参 - 密文"]
    #[doc = "@param input_len  函数入参 - 密文长度"]
    #[doc = "@param output  函数出参 - 明文"]
    #[doc = "@param output_len  函数出参 - 明文长度"]
    #[doc = "@param key  函数入参 - 秘钥"]
    #[doc = "@param key_len  函数入参 - 秘钥长度"]
    #[doc = "@param iv  函数入参 - 初始化向量"]
    #[doc = "@param iv_len  函数入参 - 初始化向量长度"]
    #[doc = "@param type 函数入参 - 对称算法类型，可选sm4、AES、后量子密码算法等"]
    #[doc = "@return 0表示成功，其他值为错误码"]
    pub fn ctr_decrypt(
        input: *const ::std::os::raw::c_uchar,
        input_len: size_t,
        output: *mut ::std::os::raw::c_uchar,
        output_len: *mut size_t,
        key: *const ::std::os::raw::c_uchar,
        key_len: size_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: size_t,
        type_: symmetric_cryptograph_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "SM3 hash算法，3个接口用法与OpenSSL的MD5算法的接口保持一致。"]
    #[doc = "digest至少需要分配32字节"]
    pub fn SM3Init(ctx: *mut sm3_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SM3Update(
        ctx: *mut sm3_ctx_t,
        data: *const ::std::os::raw::c_uchar,
        data_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SM3Final(
        ctx: *mut sm3_ctx_t,
        digest: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
