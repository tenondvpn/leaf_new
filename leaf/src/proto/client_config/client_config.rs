// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/proto/client_config/client_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ClientNode {
    // message fields
    pub node_list: ::protobuf::RepeatedField<ProxyNode>,
    pub user_login_information: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientNode {
    fn default() -> &'a ClientNode {
        <ClientNode as ::protobuf::Message>::default_instance()
    }
}

impl ClientNode {
    pub fn new() -> ClientNode {
        ::std::default::Default::default()
    }

    // repeated .leaf.ProxyNode node_list = 1;


    pub fn get_node_list(&self) -> &[ProxyNode] {
        &self.node_list
    }
    pub fn clear_node_list(&mut self) {
        self.node_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_list(&mut self, v: ::protobuf::RepeatedField<ProxyNode>) {
        self.node_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_list(&mut self) -> &mut ::protobuf::RepeatedField<ProxyNode> {
        &mut self.node_list
    }

    // Take field
    pub fn take_node_list(&mut self) -> ::protobuf::RepeatedField<ProxyNode> {
        ::std::mem::replace(&mut self.node_list, ::protobuf::RepeatedField::new())
    }

    // optional string user_login_information = 2;


    pub fn get_user_login_information(&self) -> &str {
        match self.user_login_information.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_user_login_information(&mut self) {
        self.user_login_information.clear();
    }

    pub fn has_user_login_information(&self) -> bool {
        self.user_login_information.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_login_information(&mut self, v: ::std::string::String) {
        self.user_login_information = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_login_information(&mut self) -> &mut ::std::string::String {
        if self.user_login_information.is_none() {
            self.user_login_information.set_default();
        }
        self.user_login_information.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_login_information(&mut self) -> ::std::string::String {
        self.user_login_information.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientNode {
    fn is_initialized(&self) -> bool {
        for v in &self.node_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_list)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.user_login_information)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.node_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.user_login_information.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.node_list {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.user_login_information.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientNode {
        ClientNode::new()
    }

    fn default_instance() -> &'static ClientNode {
        static instance: ::protobuf::rt::LazyV2<ClientNode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientNode::new)
    }
}

impl ::protobuf::Clear for ClientNode {
    fn clear(&mut self) {
        self.node_list.clear();
        self.user_login_information.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientNode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProxyNode {
    // message fields
    pub server_address: ::protobuf::SingularField<::std::string::String>,
    pub server_domain: ::protobuf::SingularField<::std::string::String>,
    pub server_port: ::std::option::Option<u32>,
    pub client_platform_type: ::protobuf::SingularField<::std::string::String>,
    pub client_platform_version: ::protobuf::SingularField<::std::string::String>,
    pub client_platform_category: ::protobuf::SingularField<::std::string::String>,
    pub symmetric_crypto_info: ::protobuf::SingularPtrField<CryptoMethodInfo>,
    pub asymmetric_crypto_info: ::protobuf::SingularPtrField<CryptoMethodInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProxyNode {
    fn default() -> &'a ProxyNode {
        <ProxyNode as ::protobuf::Message>::default_instance()
    }
}

impl ProxyNode {
    pub fn new() -> ProxyNode {
        ::std::default::Default::default()
    }

    // optional string server_address = 1;


    pub fn get_server_address(&self) -> &str {
        match self.server_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_server_address(&mut self) {
        self.server_address.clear();
    }

    pub fn has_server_address(&self) -> bool {
        self.server_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_address(&mut self, v: ::std::string::String) {
        self.server_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_address(&mut self) -> &mut ::std::string::String {
        if self.server_address.is_none() {
            self.server_address.set_default();
        }
        self.server_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_server_address(&mut self) -> ::std::string::String {
        self.server_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string server_domain = 2;


    pub fn get_server_domain(&self) -> &str {
        match self.server_domain.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_server_domain(&mut self) {
        self.server_domain.clear();
    }

    pub fn has_server_domain(&self) -> bool {
        self.server_domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_domain(&mut self, v: ::std::string::String) {
        self.server_domain = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_domain(&mut self) -> &mut ::std::string::String {
        if self.server_domain.is_none() {
            self.server_domain.set_default();
        }
        self.server_domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_server_domain(&mut self) -> ::std::string::String {
        self.server_domain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 server_port = 3;


    pub fn get_server_port(&self) -> u32 {
        self.server_port.unwrap_or(0)
    }
    pub fn clear_server_port(&mut self) {
        self.server_port = ::std::option::Option::None;
    }

    pub fn has_server_port(&self) -> bool {
        self.server_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_port(&mut self, v: u32) {
        self.server_port = ::std::option::Option::Some(v);
    }

    // required string client_platform_type = 4;


    pub fn get_client_platform_type(&self) -> &str {
        match self.client_platform_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_client_platform_type(&mut self) {
        self.client_platform_type.clear();
    }

    pub fn has_client_platform_type(&self) -> bool {
        self.client_platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_platform_type(&mut self, v: ::std::string::String) {
        self.client_platform_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_platform_type(&mut self) -> &mut ::std::string::String {
        if self.client_platform_type.is_none() {
            self.client_platform_type.set_default();
        }
        self.client_platform_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_platform_type(&mut self) -> ::std::string::String {
        self.client_platform_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string client_platform_version = 5;


    pub fn get_client_platform_version(&self) -> &str {
        match self.client_platform_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_client_platform_version(&mut self) {
        self.client_platform_version.clear();
    }

    pub fn has_client_platform_version(&self) -> bool {
        self.client_platform_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_platform_version(&mut self, v: ::std::string::String) {
        self.client_platform_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_platform_version(&mut self) -> &mut ::std::string::String {
        if self.client_platform_version.is_none() {
            self.client_platform_version.set_default();
        }
        self.client_platform_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_platform_version(&mut self) -> ::std::string::String {
        self.client_platform_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string client_platform_category = 6;


    pub fn get_client_platform_category(&self) -> &str {
        match self.client_platform_category.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_client_platform_category(&mut self) {
        self.client_platform_category.clear();
    }

    pub fn has_client_platform_category(&self) -> bool {
        self.client_platform_category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_platform_category(&mut self, v: ::std::string::String) {
        self.client_platform_category = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_platform_category(&mut self) -> &mut ::std::string::String {
        if self.client_platform_category.is_none() {
            self.client_platform_category.set_default();
        }
        self.client_platform_category.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_platform_category(&mut self) -> ::std::string::String {
        self.client_platform_category.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .leaf.CryptoMethodInfo symmetric_crypto_info = 7;


    pub fn get_symmetric_crypto_info(&self) -> &CryptoMethodInfo {
        self.symmetric_crypto_info.as_ref().unwrap_or_else(|| <CryptoMethodInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_symmetric_crypto_info(&mut self) {
        self.symmetric_crypto_info.clear();
    }

    pub fn has_symmetric_crypto_info(&self) -> bool {
        self.symmetric_crypto_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_symmetric_crypto_info(&mut self, v: CryptoMethodInfo) {
        self.symmetric_crypto_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symmetric_crypto_info(&mut self) -> &mut CryptoMethodInfo {
        if self.symmetric_crypto_info.is_none() {
            self.symmetric_crypto_info.set_default();
        }
        self.symmetric_crypto_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_symmetric_crypto_info(&mut self) -> CryptoMethodInfo {
        self.symmetric_crypto_info.take().unwrap_or_else(|| CryptoMethodInfo::new())
    }

    // optional .leaf.CryptoMethodInfo asymmetric_crypto_info = 8;


    pub fn get_asymmetric_crypto_info(&self) -> &CryptoMethodInfo {
        self.asymmetric_crypto_info.as_ref().unwrap_or_else(|| <CryptoMethodInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_asymmetric_crypto_info(&mut self) {
        self.asymmetric_crypto_info.clear();
    }

    pub fn has_asymmetric_crypto_info(&self) -> bool {
        self.asymmetric_crypto_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asymmetric_crypto_info(&mut self, v: CryptoMethodInfo) {
        self.asymmetric_crypto_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asymmetric_crypto_info(&mut self) -> &mut CryptoMethodInfo {
        if self.asymmetric_crypto_info.is_none() {
            self.asymmetric_crypto_info.set_default();
        }
        self.asymmetric_crypto_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_asymmetric_crypto_info(&mut self) -> CryptoMethodInfo {
        self.asymmetric_crypto_info.take().unwrap_or_else(|| CryptoMethodInfo::new())
    }
}

impl ::protobuf::Message for ProxyNode {
    fn is_initialized(&self) -> bool {
        if self.server_port.is_none() {
            return false;
        }
        if self.client_platform_type.is_none() {
            return false;
        }
        if self.client_platform_version.is_none() {
            return false;
        }
        if self.client_platform_category.is_none() {
            return false;
        }
        for v in &self.symmetric_crypto_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.asymmetric_crypto_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.server_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.server_domain)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.server_port = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_platform_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_platform_version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_platform_category)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.symmetric_crypto_info)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.asymmetric_crypto_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.server_address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.server_domain.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.server_port {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.client_platform_type.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.client_platform_version.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.client_platform_category.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.symmetric_crypto_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.asymmetric_crypto_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.server_address.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.server_domain.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.server_port {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.client_platform_type.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.client_platform_version.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.client_platform_category.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.symmetric_crypto_info.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.asymmetric_crypto_info.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyNode {
        ProxyNode::new()
    }

    fn default_instance() -> &'static ProxyNode {
        static instance: ::protobuf::rt::LazyV2<ProxyNode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProxyNode::new)
    }
}

impl ::protobuf::Clear for ProxyNode {
    fn clear(&mut self) {
        self.server_address.clear();
        self.server_domain.clear();
        self.server_port = ::std::option::Option::None;
        self.client_platform_type.clear();
        self.client_platform_version.clear();
        self.client_platform_category.clear();
        self.symmetric_crypto_info.clear();
        self.asymmetric_crypto_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyNode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CryptoMethodInfo {
    // message fields
    pub enc_method_type: ::std::option::Option<super::server_config::EncMethodEnum>,
    pub server_pubkey: ::protobuf::SingularField<::std::string::String>,
    pub client_pk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub client_sec_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub sec_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub client_unique_id: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CryptoMethodInfo {
    fn default() -> &'a CryptoMethodInfo {
        <CryptoMethodInfo as ::protobuf::Message>::default_instance()
    }
}

impl CryptoMethodInfo {
    pub fn new() -> CryptoMethodInfo {
        ::std::default::Default::default()
    }

    // required .leaf.EncMethodEnum enc_method_type = 1;


    pub fn get_enc_method_type(&self) -> super::server_config::EncMethodEnum {
        self.enc_method_type.unwrap_or(super::server_config::EncMethodEnum::NO_ENC)
    }
    pub fn clear_enc_method_type(&mut self) {
        self.enc_method_type = ::std::option::Option::None;
    }

    pub fn has_enc_method_type(&self) -> bool {
        self.enc_method_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enc_method_type(&mut self, v: super::server_config::EncMethodEnum) {
        self.enc_method_type = ::std::option::Option::Some(v);
    }

    // optional string server_pubkey = 2;


    pub fn get_server_pubkey(&self) -> &str {
        match self.server_pubkey.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_server_pubkey(&mut self) {
        self.server_pubkey.clear();
    }

    pub fn has_server_pubkey(&self) -> bool {
        self.server_pubkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_pubkey(&mut self, v: ::std::string::String) {
        self.server_pubkey = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_pubkey(&mut self) -> &mut ::std::string::String {
        if self.server_pubkey.is_none() {
            self.server_pubkey.set_default();
        }
        self.server_pubkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_server_pubkey(&mut self) -> ::std::string::String {
        self.server_pubkey.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes client_pk = 3;


    pub fn get_client_pk(&self) -> &[u8] {
        match self.client_pk.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_client_pk(&mut self) {
        self.client_pk.clear();
    }

    pub fn has_client_pk(&self) -> bool {
        self.client_pk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_pk(&mut self, v: ::std::vec::Vec<u8>) {
        self.client_pk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_pk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.client_pk.is_none() {
            self.client_pk.set_default();
        }
        self.client_pk.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_pk(&mut self) -> ::std::vec::Vec<u8> {
        self.client_pk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes client_sec_key = 4;


    pub fn get_client_sec_key(&self) -> &[u8] {
        match self.client_sec_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_client_sec_key(&mut self) {
        self.client_sec_key.clear();
    }

    pub fn has_client_sec_key(&self) -> bool {
        self.client_sec_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_sec_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.client_sec_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_sec_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.client_sec_key.is_none() {
            self.client_sec_key.set_default();
        }
        self.client_sec_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_sec_key(&mut self) -> ::std::vec::Vec<u8> {
        self.client_sec_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes sec_key = 5;


    pub fn get_sec_key(&self) -> &[u8] {
        match self.sec_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_sec_key(&mut self) {
        self.sec_key.clear();
    }

    pub fn has_sec_key(&self) -> bool {
        self.sec_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sec_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.sec_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sec_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sec_key.is_none() {
            self.sec_key.set_default();
        }
        self.sec_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_sec_key(&mut self) -> ::std::vec::Vec<u8> {
        self.sec_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 client_unique_id = 6;


    pub fn get_client_unique_id(&self) -> u64 {
        self.client_unique_id.unwrap_or(0)
    }
    pub fn clear_client_unique_id(&mut self) {
        self.client_unique_id = ::std::option::Option::None;
    }

    pub fn has_client_unique_id(&self) -> bool {
        self.client_unique_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_unique_id(&mut self, v: u64) {
        self.client_unique_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CryptoMethodInfo {
    fn is_initialized(&self) -> bool {
        if self.enc_method_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.enc_method_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.server_pubkey)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.client_pk)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.client_sec_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sec_key)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_unique_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.enc_method_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.server_pubkey.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.client_pk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.client_sec_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.sec_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.client_unique_id {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.enc_method_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.server_pubkey.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.client_pk.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.client_sec_key.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.sec_key.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(v) = self.client_unique_id {
            os.write_uint64(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoMethodInfo {
        CryptoMethodInfo::new()
    }

    fn default_instance() -> &'static CryptoMethodInfo {
        static instance: ::protobuf::rt::LazyV2<CryptoMethodInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CryptoMethodInfo::new)
    }
}

impl ::protobuf::Clear for CryptoMethodInfo {
    fn clear(&mut self) {
        self.enc_method_type = ::std::option::Option::None;
        self.server_pubkey.clear();
        self.client_pk.clear();
        self.client_sec_key.clear();
        self.sec_key.clear();
        self.client_unique_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoMethodInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RustMessage {
    // message fields
    pub timestamp: ::std::option::Option<u64>,
    pub message_type: ::std::option::Option<RustMessageType>,
    pub data: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RustMessage {
    fn default() -> &'a RustMessage {
        <RustMessage as ::protobuf::Message>::default_instance()
    }
}

impl RustMessage {
    pub fn new() -> RustMessage {
        ::std::default::Default::default()
    }

    // optional uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional .leaf.RustMessageType message_type = 2;


    pub fn get_message_type(&self) -> RustMessageType {
        self.message_type.unwrap_or(RustMessageType::ERROR_EVENT)
    }
    pub fn clear_message_type(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_message_type(&self) -> bool {
        self.message_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: RustMessageType) {
        self.message_type = ::std::option::Option::Some(v);
    }

    // optional string data = 3;


    pub fn get_data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for RustMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.message_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.message_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timestamp {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.message_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RustMessage {
        RustMessage::new()
    }

    fn default_instance() -> &'static RustMessage {
        static instance: ::protobuf::rt::LazyV2<RustMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RustMessage::new)
    }
}

impl ::protobuf::Clear for RustMessage {
    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.message_type = ::std::option::Option::None;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RustMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ErrorRustMessage {
    // message fields
    pub error_type: ::std::option::Option<ErrorType>,
    pub error_msg: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ErrorRustMessage {
    fn default() -> &'a ErrorRustMessage {
        <ErrorRustMessage as ::protobuf::Message>::default_instance()
    }
}

impl ErrorRustMessage {
    pub fn new() -> ErrorRustMessage {
        ::std::default::Default::default()
    }

    // optional .leaf.ErrorType error_type = 1;


    pub fn get_error_type(&self) -> ErrorType {
        self.error_type.unwrap_or(ErrorType::change_password_error)
    }
    pub fn clear_error_type(&mut self) {
        self.error_type = ::std::option::Option::None;
    }

    pub fn has_error_type(&self) -> bool {
        self.error_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_type(&mut self, v: ErrorType) {
        self.error_type = ::std::option::Option::Some(v);
    }

    // optional string error_msg = 2;


    pub fn get_error_msg(&self) -> &str {
        match self.error_msg.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_error_msg(&mut self) {
        self.error_msg.clear();
    }

    pub fn has_error_msg(&self) -> bool {
        self.error_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        if self.error_msg.is_none() {
            self.error_msg.set_default();
        }
        self.error_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        self.error_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for ErrorRustMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.error_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.error_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.error_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.error_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.error_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.error_msg.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ErrorRustMessage {
        ErrorRustMessage::new()
    }

    fn default_instance() -> &'static ErrorRustMessage {
        static instance: ::protobuf::rt::LazyV2<ErrorRustMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ErrorRustMessage::new)
    }
}

impl ::protobuf::Clear for ErrorRustMessage {
    fn clear(&mut self) {
        self.error_type = ::std::option::Option::None;
        self.error_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorRustMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ErrorType {
    change_password_error = 1,
    crypto_error = 2,
    server_error = 3,
    rust_error = 4,
}

impl ::protobuf::ProtobufEnum for ErrorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorType> {
        match value {
            1 => ::std::option::Option::Some(ErrorType::change_password_error),
            2 => ::std::option::Option::Some(ErrorType::crypto_error),
            3 => ::std::option::Option::Some(ErrorType::server_error),
            4 => ::std::option::Option::Some(ErrorType::rust_error),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorType] = &[
            ErrorType::change_password_error,
            ErrorType::crypto_error,
            ErrorType::server_error,
            ErrorType::rust_error,
        ];
        values
    }
}

impl ::std::marker::Copy for ErrorType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ErrorType {
    fn default() -> Self {
        ErrorType::change_password_error
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum RustMessageType {
    ERROR_EVENT = 1,
}

impl ::protobuf::ProtobufEnum for RustMessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RustMessageType> {
        match value {
            1 => ::std::option::Option::Some(RustMessageType::ERROR_EVENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RustMessageType] = &[
            RustMessageType::ERROR_EVENT,
        ];
        values
    }
}

impl ::std::marker::Copy for RustMessageType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for RustMessageType {
    fn default() -> Self {
        RustMessageType::ERROR_EVENT
    }
}

impl ::protobuf::reflect::ProtobufValue for RustMessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
