syntax = "proto2";
package leaf;

import "src/proto/server_config/server_config.proto";

message ClientNode {
  repeated ProxyNode node_list = 1;
  optional string user_login_information  = 2;// 用户登录信息，可以是json，交换密钥时透传

}

message ProxyNode {
  optional string server_address= 1;
  optional string server_domain= 2; // 预留
  required uint32 server_port= 3;

  required string client_platform_type = 4; //ios,mac,chg,win,and,
  required string client_platform_version = 5;//6.3.2
  required string client_platform_category = 6;//official

  optional CryptoMethodInfo symmetric_crypto_info = 7; // 对称算法信息
  optional CryptoMethodInfo asymmetric_crypto_info = 8; // 非对称算法信息
  optional uint32 server_http_port= 9;
}

message CryptoMethodInfo {
  required EncMethodEnum enc_method_type = 1; // 加密算法类型
  optional string server_pubkey = 2; // 代理服务器公钥
  optional bytes client_pk = 3; // app 忽略，客户端生成公钥
  optional bytes client_sec_key = 4; // app 忽略，客户端生成私钥
  optional bytes sec_key = 5; //app忽略， 对称加密密钥
  optional uint64 client_unique_id = 6; //app忽略， 客户端唯一标识(uint64)
}

message RustMessage {
  optional uint64 timestamp = 1;
  optional RustMessageType message_type =2;
  optional string data = 3; // Json
}
message ErrorRustMessage {
  optional ErrorType error_type =1;
  optional string error_msg=2; // msg 一般用来打印堆栈。
}
enum ErrorType {
  change_password_error = 1; // 交换密钥失败
  crypto_error = 2; // 加解密失败
  server_error = 3; // 服务端主动断开
  rust_error = 4; // rust 代码异常
}

enum RustMessageType {
  ERROR_EVENT = 1;
}





